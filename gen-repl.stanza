defpackage spin :
  import core
  import collections
  import stz/ids
  import stz/primitives
  import stz/pkg
  import stz/tl-ir
  import stz/pl-ir
  import stz/kl-ir
  import stz/tgt-ir

;; TODO: HANDLE AMBIGUOUS REFS WITH ANONYMOUS FUNCTION
;; TODO: HANDLE TARGS WITH ANONYMOUS FUNCTION

defn dump (s:OutputStream, pkg-name:String, ids:PkgIds) :
  println-all(s, ["defpackage eval-" pkg-name ":"])
  println-all(s, ["  import core"])
  println-all(s, ["  import collections"])
  println-all(s, ["  import eval"])
  defn include-import? (imp:Symbol) :
    not (imp == `clib or (pkg-name == "core" and contains?([`collections `core], imp)) or (pkg-name == "collections" and contains?([`collections], imp)))
  defn ref? (x) : x is RefT
  defn include-function? (fid:LSFnId|FnId|MultiId) :
    match(fid) :
    (lfid:LSFnId) :
      length(targs(fid)) == 0 and all?(ref?, a1(fid)) and ref?(a2(fid))
    (rfid:FnId|MultiId) :
      not (pkg-name == "core" and contains?([`sum, `product, `minimum, `maximum, `qsort!, `lazy-qsort, `append-all], name(fid))) and
      not (pkg-name == "collections" and contains?([], name(fid))) and
      not (pkg-name == "utils" and contains?([`ensure-index-in-bounds], name(fid))) and
      not (pkg-name == "geom" and contains?([`max `min], name(fid))) and
      not (pkg-name == "ao" and contains?([`max `min], name(fid)))
  for ipkg in imports(ids) do :
    val imp = package(ipkg)
    if include-import?(imp) :
      println-all(s, ["  import eval-" imp])
  if not contains?(["core", "collections", "eval"], pkg-name) :
    println-all(s, ["  import " pkg-name])
  println-all(s, [""])
  println-all(s, ["defn fab-pkg () :"])
  print-all(s, ["  val pkg = Package(`" pkg-name ", ["])
  for ipkg in imports(ids) do :
    val imp = package(ipkg)
    if include-import?(imp) :
      print-all(s, [" *packages*[`" imp "]"])
  println-all(s, [" ])"])
  println-all(s, ["  val env = frame(pkg)"])
  defn args-str (n:Int) :
    string-join(["(" string-join(for i in 0 to n seq : string-join([" a" i])) ")"])
  defn targs-str (n:Int) :
    string-join(["<" string-join(for i in 0 to n seq : " ?") ">"])
  val fns = HashTable<Symbol, List<LSFnId|FnId|MultiId>>()
  for decl in declarations(ids) do :
    val id = id(decl)
    if id is (ValId|VarId) and visibility(id) is Public :
      println-all(s, ["  add-frame-binding(env, `" name(id) ", " name(id) ")"])
    else if id is (LSFnId|FnId|MultiId) and visibility(id) is Public :
      val fid = id as (LSFnId|FnId|MultiId)
      fns[name(id)] = cons(fid, get?(fns, name(id), List()))
    else if id is TypeId and visibility(id) is Public :
      println-all(s, ["  add-frame-binding(env, `" name(id) ", Type(`" name(id) " fn (x) : x is " name(id) ", fn (x): x as " name(id) "))"])
  for fs in fns do :
    val fid = head(value(fs))
    if all?(include-function?, value(fs)) :
      val ntargs = length(targs(fid))
      val arity = length(a1(fid))
      if length(value(fs)) > 1 :
        if all?({ _ == length(a1(fid))}, seq(length, seq(a1, value(fs)))) :
          println-all(s, ["  add-frame-binding(env, `" name(fid) ", fn " args-str(arity) " : " name(fid) args-str(arity) ")"])
        else if none?({ _ > 0 }, seq({ length(targs(_)) }, value(fs))) :
          println-all(s, ["  add-frame-binding(env, `" name(fid) ", " name(fid) ")"])
      else :
        if ntargs > 0 :
          println-all(s, ["  add-frame-binding(env, `" name(fid) ", fn " args-str(arity) " : " name(fid) targs-str(ntargs) args-str(arity) ")"])
        else :
          println-all(s, ["  add-frame-binding(env, `" name(fid) ", " name(fid) ")"])
  
  println-all(s, ["  false"])
  println-all(s, [""])
  println-all(s, ["fab-pkg()"])

defn dump (pkg-name:String) :
  val path = if contains?(["core", "collections", "math"], pkg-name) : "/Users/jrb/stanza/pkgs" else : "build"
  val pathname = string-join([path "/" pkg-name ".pkg"])
  val pkg = load-package(pathname)
  val file = FileOutputStream(string-join(["build/eval-" pkg-name ".stanza"]))
  try :
    dump(file, pkg-name, ids(pkg))
  finally : close(file)


defn main () :
  val name = command-line-arguments()[1]
  dump(name)
  
main()  

