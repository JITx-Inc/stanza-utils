;; See license.txt for details about licensing.

defpackage utils :
  import core
  import collections
  import math

;;; GENERAL

protected extern srand: (int) -> int

public lostanza defn srand (i:ref<Int>) -> ref<False> :
  call-c srand(i.value)
  return false

public val FLOAT-MIN = -1.0e32f
public val FLOAT-MAX =  1.0e32f

public defn ensure-index-in-bounds (xs:Lengthable, i:Int) :
  if i < 0 or i >= length(xs) :
    fatal("Index (%_) out of bounds." % [i])
      
public defn range-bound (s:Lengthable, r:Range) -> [Int, Int] :
  match(end(r), inclusive?(r)) :
    (e:Int, i:True) : [start(r), e + 1]
    (e:Int, i:False) : [start(r), e]
    (e:False, i) : [start(r), length(s)]

public defn default<T> (v:T|False, d:T) -> T :
  match(v) :
    (t:False) : d
    (o:T) : o

public defn hex-to-int (s: String) -> Int :
  var res = 0
  for i in 2 to length(s) do :
    val dig = index-of("0123456789ABCDEF", s[i]) as Int
    res = res * 16 + dig
  res

;;; CHARACTERS

public defn digit? (c:Int) -> True|False :
  c >= to-int('0') and c <= to-int('9')

public defn lower? (c:Int) -> True|False :
  c >= to-int('a') and c <= to-int('z')

public defn upper? (c:Int) -> True|False :
  c >= to-int('A') and c <= to-int('Z')

public defn printable? (c:Int) -> True|False :
  c >= to-int(' ') and c <= to-int('~')

public defn upper-case (c:Int) -> Int :
  if lower?(c) :
    c - to-int('a') + to-int('A')
  else :
    c

public defn lower-case (c:Int) -> Int :
  if upper?(c) :
    c - to-int('A') + to-int('a')
  else :
    c

;; public defn digit? (c:Char) -> True|False : digit?(to-int(c))
public defn lower? (c:Char) -> True|False : lower?(to-int(c))
public defn upper? (c:Char) -> True|False : upper?(to-int(c))

public defn trim (s:String, ok?:(Char) -> True|False) -> String :
   match(index-when(ok?, s)) :
      (i:Int) :
         val n = length(s)
         val j = for i in (n - 1) through 0 by -1 find! :
            ok?(s[i])
         s[i through j]   
      (i:False) : ""

public defn split* (str:String, s:String) -> Seq<String> :
   generate<String> :
      val strl = length(str)
      val sl = length(s)
      defn loop (b:Int) :
         if b < strl :
            match(index-of-chars(str, b to false, s)) :
               (i:Int) :
                  yield(str[b to i])
                  loop(i + sl)
               (i:False) :
                  yield(str[b to false])
      loop(0)

public defn to-array!<?T> (xs:Seqable<?T>) -> Array<T> :
   match(xs) :
      (xs:Seqable<T> & Lengthable) :
         val n = length(xs)
         val a = Array<T>(n)
         for (x in xs, i in 0 to n) do :
            a[i] = x
         a
      (xs) :
         to-array!(to-list(xs))

;;; BUFFERED STREAM

public deftype PollableInputStream <: InputStream
public defmulti avail? (p:PollableInputStream) -> True|False

public deftype CharBuffer
defmulti peek? (buf:CharBuffer) -> False|Char
defmulti avail? (buf:CharBuffer) -> True|False
defmulti get-char (buf:CharBuffer) -> False|Char

public defn CharBuffer (capacity:Int, fill:(CharArray, Int) -> Int, avail?: () -> True|False) :
  val data = CharArray(capacity)
  var idx  = 0
  var len  = 0
  new CharBuffer :
    defmethod peek? (this) -> False|Char :
      if idx >= len :
        len = fill(data, capacity)
        idx = 0
      if len == 0 :
        false
      else :
        data[idx]
    defmethod avail? (this) -> True|False :
      idx < len or avail?()
    defmethod get-char (this) -> False|Char :
      match(peek?(this)) :
        (f:False) : false
        (c:Char) :  (idx = idx + 1, c)

public defn CharBuffer (capacity:Int, stream:PollableInputStream) :
  CharBuffer(capacity, fill{_, 0 to _, stream}, avail?{stream})

public deftype BufferedInputStream <: PollableInputStream
public defmulti peek? (s:BufferedInputStream) -> Char|False
public defmulti buffer (s:BufferedInputStream) -> CharBuffer

defmethod peek? (x:BufferedInputStream) :
  peek?(buffer(x))

defmethod avail? (x:BufferedInputStream) :
  avail?(buffer(x))

defmethod get-char (x:BufferedInputStream) :
  get-char(buffer(x))

public defn BufferedInputStream (buf:CharBuffer) :
  new BufferedInputStream :
    defmethod buffer (this) : buf

public defn BufferedInputStream (stream:PollableInputStream, size:Int) :
  BufferedInputStream(CharBuffer(size, stream))

public defn BufferedInputStream (size:Int, fill:(CharArray, Int) -> Int, avail?: () -> True|False) :
  BufferedInputStream(CharBuffer(size, fill, avail?))

public defn get-char! (s:BufferedInputStream) -> Char :
  match(get-char(s)) :
    (f:False): fail()
    (c:Char): c

public defn get-chars! (s:BufferedInputStream, n:Int) -> String :
  val buffer = StringBuffer()
  for i in 0 to n do :
    add(buffer, get-char!(s))
  to-string(buffer)

public defn get-chars-while (s:BufferedInputStream, f:(Char) -> True|False) -> String :
  val buffer = StringBuffer()
  while peek?(s) is Char and f(peek?(s) as Char) :
    add(buffer, get-char!(s))
  to-string(buffer)

public defn parse-int (s:BufferedInputStream) -> Int :
  val chars = get-chars-while(s, digit?)
  to-int(chars) as Int

public defn expect-char (s:BufferedInputStream, c:Char) -> False :
  val gc = get-char(s)
  if gc != c: fatal("Expected %_ got %_" % [c, gc])

