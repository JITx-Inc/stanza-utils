;; See license.txt for details about licensing.

defpackage utils :
  import core
  import collections
  import math

;;; GENERAL

public defn qsort-on<?T,?S> (key:T -> ?S&Comparable<S>, coll:Seqable<?T>) :
  lazy-qsort(coll, compare{key(_), key(_)})

public defn qsort<?T> (coll:Seqable<?T&Comparable<T>>) -> Collection<T> & Lengthable :
  lazy-qsort(coll, compare)

public defn modulo (x:Float, y:Float) -> Float :
  val d = x / y
  val f = d - to-float(to-int(d))
  y * f

public defn rndf () -> Float :
  val n = 1000000
  to-float(rand() % n) / to-float(n)

public defn rndf (lo:Float, hi:Float) -> Float :
  val r = rndf()
  val d = hi - lo
  lo + (r % d)

public defn my-ensure-index-in-bounds (xs:Lengthable, i:Int) :
  if i < 0 or i >= length(xs) :
    fatal("Index (%_) out of bounds." % [i])
      
;; public defn range-bound (s:Lengthable, r:Range) -> [Int, Int] :
;;   match(end(r), inclusive?(r)) :
;;     (e:Int, i:True) : [start(r), e + 1]
;;     (e:Int, i:False) : [start(r), e]
;;     (e:False, i) : [start(r), length(s)]

public defn default<T> (v:T|False, d:T) -> T :
  match(v) :
    (t:False) : d
    (o:T) : o

public defn hex-to-int (s: String) -> Int :
  var res = 0
  for i in 2 to length(s) do :
    val dig = index-of("0123456789ABCDEF", s[i]) as Int
    res = res * 16 + dig
  res

;;; CHARACTERS

public defn digit? (c:Int) -> True|False :
  c >= to-int('0') and c <= to-int('9')

public defn lower? (c:Int) -> True|False :
  c >= to-int('a') and c <= to-int('z')

public defn upper? (c:Int) -> True|False :
  c >= to-int('A') and c <= to-int('Z')

public defn printable? (c:Int) -> True|False :
  c >= to-int(' ') and c <= to-int('~')

public defn upper-case (c:Int) -> Int :
  if lower?(c) :
    c - to-int('a') + to-int('A')
  else :
    c

public defn lower-case (c:Int) -> Int :
  if upper?(c) :
    c - to-int('A') + to-int('a')
  else :
    c

;; public defn digit? (c:Char) -> True|False : digit?(to-int(c))
public defn lower? (c:Char) -> True|False : lower?(to-int(c))
public defn upper? (c:Char) -> True|False : upper?(to-int(c))

public defn trim (s:String, ok?:(Char) -> True|False) -> String :
   match(index-when(ok?, s)) :
      (i:Int) :
         val n = length(s)
         val j = for i in (n - 1) through 0 by -1 find! :
            ok?(s[i])
         s[i through j]   
      (i:False) : ""

defn split-any* (str:IndexedCollection<Char>, any:String, range:Seq<Int>) -> Seq<KeyValue<Int, String>> :
  generate<KeyValue<Int, String>> :
    val beg = next(range)
    let loop (start = beg, i = beg) :
      if empty?(range) :
        if contains?(any, str[i]) :
          yield(start => (to-string $ str[start to i]))
          yield(i => (to-string $ str[i through i]))
          loop(i + 1, i + 1)
        else :
          loop(start, i + 1)
      else if i != start :
        yield(start => (to-string $ str[start to false]))

public defn split-any (str:IndexedCollection<Char>, any:String) -> Seq<KeyValue<Int, String>> :
  generate<KeyValue<Int, String>> :
    let loop (start = 0, i = 0) :
      if i < length(str) :
        if contains?(any, str[i]) :
          yield(start => (to-string $ str[start to i]))
          yield(i => (to-string $ str[i through i]))
          loop(i + 1, i + 1)
        else :
          loop(start, i + 1)
      else if start < length(str) :
        yield(start => (to-string $ str[start to false]))

public defn split* (str:String, s:String) -> Seq<String> :
  generate<String> :
    val strl = length(str)
    val sl = length(s)
    let loop (b = 0) :
      if b < strl :
        match(index-of-chars(str, b to false, s)) :
          (i:Int) :
            yield(str[b to i])
            loop(i + sl)
          (i:False) :
            yield(str[b to false])
      else if b > 0 :
        yield("")

public defn to-array!<?T> (xs:Seqable<?T>) -> Array<T> :
   match(xs) :
      (xs:Seqable<T> & Lengthable) :
         val n = length(xs)
         val a = Array<T>(n)
         for (x in xs, i in 0 to n) do :
            a[i] = x
         a
      (xs) :
         to-array!(to-list(xs))

;;; BUFFERED STREAM

public deftype PollableInputStream <: InputStream
public defmulti avail? (p:PollableInputStream) -> True|False

public deftype CharBuffer
defmulti peek? (buf:CharBuffer) -> False|Char
defmulti avail? (buf:CharBuffer) -> True|False
defmulti get-char (buf:CharBuffer) -> False|Char

public defn CharBuffer (capacity:Int, fill:(CharArray, Int) -> Int, avail?: () -> True|False) :
  val data = CharArray(capacity)
  var idx  = 0
  var len  = 0
  new CharBuffer :
    defmethod peek? (this) -> False|Char :
      if idx >= len :
        len = fill(data, capacity)
        idx = 0
      if len == 0 :
        false
      else :
        data[idx]
    defmethod avail? (this) -> True|False :
      idx < len or avail?()
    defmethod get-char (this) -> False|Char :
      match(peek?(this)) :
        (f:False) : false
        (c:Char) :  (idx = idx + 1, c)

public defn CharBuffer (capacity:Int, stream:PollableInputStream) :
  CharBuffer(capacity, fill{_, 0 to _, stream}, avail?{stream})

public deftype MyBufferedInputStream <: PollableInputStream
public defmulti peek? (s:MyBufferedInputStream) -> Char|False
public defmulti buffer (s:MyBufferedInputStream) -> CharBuffer

defmethod peek? (x:MyBufferedInputStream) :
  peek?(buffer(x))

defmethod avail? (x:MyBufferedInputStream) :
  avail?(buffer(x))

defmethod get-char (x:MyBufferedInputStream) :
  get-char(buffer(x))

public defn MyBufferedInputStream (buf:CharBuffer) :
  new MyBufferedInputStream :
    defmethod buffer (this) : buf

public defn MyBufferedInputStream (stream:PollableInputStream, size:Int) :
  MyBufferedInputStream(CharBuffer(size, stream))

public defn MyBufferedInputStream (size:Int, fill:(CharArray, Int) -> Int, avail?: () -> True|False) :
  MyBufferedInputStream(CharBuffer(size, fill, avail?))

public defn get-char! (s:MyBufferedInputStream) -> Char :
  match(get-char(s)) :
    (f:False): fail()
    (c:Char): c

public defn get-chars! (s:MyBufferedInputStream, n:Int) -> String :
  val buffer = StringBuffer()
  for i in 0 to n do :
    add(buffer, get-char!(s))
  to-string(buffer)

public defn get-chars-while (s:MyBufferedInputStream, f:(Char) -> True|False) -> String :
  val buffer = StringBuffer()
  while peek?(s) is Char and f(peek?(s) as Char) :
    add(buffer, get-char!(s))
  to-string(buffer)

public defn parse-int (s:MyBufferedInputStream) -> Int :
  val chars = get-chars-while(s, digit?)
  to-int(chars) as Int

public defn expect-char (s:MyBufferedInputStream, c:Char) -> False :
  val gc = get-char(s)
  if gc != c: fatal("Expected %_ got %_" % [c, gc])

;; TODO: SHOULD BE MERGED BACK IN
public defn stream (s:FileInputStream) :
  generate<Char> :
    let loop () :
      match(get-char(s)) :
        (c:Char) :
          yield(c)
          loop()
        (c:False) : false
    close(s)

;; TODO: SHOULD BE MERGED BACK IN
public defn slurp (s:FileInputStream) :
  String(stream(s))

public defn matches (str:Seqable<Char>, pat:String) -> Seq<Int> :
  val matches = Array<True|False>(length(pat) + 1)
  val len = length(pat)
  for i in 0 through len do :
    matches[i] = i == 0
  generate<Int> :
    for (e in str, j in 0 to false) do :
      for i in len to 0 by -1  do :
        matches[i] = (e == pat[i - 1]) and matches[i - 1]
      if matches[len] : yield(j)

public defn mask (indices:Seqable<Int>) -> Seq<True|False> :
  generate<True|False> :
    var j = 0
    for i in indices do :
      while j <= i :
        yield(i == j)
        j = j + 1  

public defn indices (mask:Seqable<True|False>) -> Seq<Int> :
  generate<Int> :
    for (e in mask, j in 0 to false) do :
      if e : yield(j)

public defn chunk<?T> (asrc:Seqable<?T>, amask:Seqable<True|False>) -> Seq<Seq<T>> :
  val [src, mask] = [to-seq(asrc), to-seq(amask)]
  generate<Seq<T>> :
    while not empty?(src) :
      val gen = generate<T> :
        let loop () :
          if not empty?(src) :
            yield(next(src))
            if empty?(mask) or next(mask) == false : loop()
      yield(gen)
