;; See license.txt for details about licensing.

defpackage file-system :
  import core
  import collections
  import math

extern malloc: (long) -> ptr<byte>
extern getcwd: (ptr<byte>, int) -> ptr<byte>
extern printf: (ptr<byte>, ? ...) -> int
extern opendir: (ptr<byte>) -> ptr<?>
extern readdirent: (ptr<?>, ptr<?>) -> int
extern closedir: (ptr<?>) -> int

lostanza deftype Dir :
  value: ptr<?>

lostanza deftype DirEntry :
  file-number:int
  record-length:int
  type:byte
  name-length:byte
  name:ptr<byte>

lostanza defn DirEntry () -> ref<?> :
  return new DirEntry{0, 0, 0 as byte, 0 as byte, 0L as ptr<byte>}

lostanza defn opendir (pathname:ref<String>) -> ref<Dir> :
  val ptr = call-c opendir(addr!(pathname.chars))
  return new Dir{ptr}

lostanza defn closedir (dir:ref<Dir>) -> ref<False> :
  call-c closedir(dir.value)
  return false

lostanza defn readdir (dir:ref<Dir>, dirent:ref<DirEntry>) -> ref<True|False> :
  val res = call-c readdirent(dir.value, addr!([dirent]))
  if res == 0L :
    return true
  else :
    return false

public lostanza defn get-cwd () -> ref<String> :
  val bytes = call-c malloc(256)
  val res   = call-c getcwd(bytes, 256)
  return String(res)

lostanza defn entry-name (ent:ref<DirEntry>) -> ref<String> :
  return String(ent.name)

lostanza defn entry-dir? (ent:ref<DirEntry>) -> ref<True|False> :
  if ent.type == 4L :
    return true
  else :
    return false

public defn directory-entries (pathname:String) -> Seq<String> :
  generate<String> :
    val ent = DirEntry()
    defn* loop (dir) :
      val closed? = readdir(dir, ent)
      if closed? :
        closedir(dir)
      else :
        yield(string-join([entry-name(ent) ("/" when entry-dir?(ent) else "")]))
        loop(dir)
    loop(opendir(pathname))
