defpackage eval:
  import core
  import math
  import collections
  import reader
  import stz/core-macros

;; public defn parse (form) -> ? :
;;    #with-syntax(core) :
;;       match-syntax(form) :
;;          (?es:#exp ... ?rest ...) :
;;             es          

public defn parse (form) -> ? :
  match-syntax[core](form) :
    (?es:#exp ... ?rest ...) :
       es          

public defstruct Type :
  name: Symbol
  isa?: (?) -> True|False
  as!: (?) -> ?

defmethod print (o:OutputStream, f:Type) :
  print-all(o, ["Type(" name(f) ")"])

public defn eval-begin (env:List<HashTable<Symbol, ?>>, l:List) -> ? :
  defn* loop (elts:List) :
    val res = eval(env, head(elts))
    if empty?(tail(elts)) : res else : loop(tail(elts))
  loop(l)

public defn add-binding (env:List<HashTable<Symbol, ?>>, name:Symbol, value) -> False :
  head(env)[name] = value

public defn set-binding (env:List<HashTable<Symbol, ?>>, name:Symbol, value) :
  label return:
    for frame in env do :
      if key?(frame, name) :
        frame[name] = value
        return()

public defn add-frame (env:List<HashTable<Symbol, ?>>) -> List<HashTable<Symbol, ?>> :
  cons(HashTable<Symbol, ?>(), env)

public defn add-bindings (env:List<HashTable<Symbol, ?>>, names:List<Symbol>, values:Seqable) -> List<HashTable<Symbol, ?>> :
  var nenv = add-frame(env)
  for (name in names, value in values) do :
    add-binding(nenv, name, value)
  nenv

defstruct NoBranchFoundException <: Exception : ()

defmethod print (o:OutputStream, e:NoBranchFoundException) :
  print(o, "No Branch Found")

defstruct UndefinedBindingException <: Exception :
  name: Symbol

defmethod print (o:OutputStream, e:UndefinedBindingException) :
  print(o, "Undefined binding %_" % [name(e)])

defn lookup (env:List<HashTable<Symbol, ?>>, name:Symbol) -> ? :
  label<?> return :
    for frame in env do :
      if key?(frame, name) :
        return(frame[name])
    throw(UndefinedBindingException(name))

defn function (env:List<HashTable<Symbol, ?>>, params:List<Symbol>, body) -> ? :
  switch {length(params) == _}:
    0: fn () : eval(env, body)
    1: fn (a0) : eval(add-bindings(env, params, [a0]), body)
    2: fn (a0, a1) : eval(add-bindings(env, params, [a0 a1]), body)
    3: fn (a0, a1 a2) : eval(add-bindings(env, params, [a0 a1 a2]), body)
    4: fn (a0, a1 a2 a3) : eval(add-bindings(env, params, [a0 a1 a2 a3]), body)
    5: fn (a0, a1 a2 a3 a4) : eval(add-bindings(env, params, [a0 a1 a2 a3 a4]), body)
    6: fn (a0, a1 a2 a3 a4 a5) : eval(add-bindings(env, params, [a0 a1 a2 a3 a4 a5]), body)

defstruct Cell :
  value: ? with: (setter => set-value)

defn function* (name:Symbol, env:List<HashTable<Symbol, ?>>, iparams:List<Symbol>, body) -> ? :
  val cell   = Cell(false)
  val params = cons(name, iparams)
  val res    = switch {length(iparams) == _}:
    0: fn* () :
         eval(add-bindings(env, params, [value(cell)]), body)
    1: fn* (a0) :
         eval(add-bindings(env, params, [value(cell) a0]), body)
    2: fn* (a0, a1) :
         eval(add-bindings(env, params, [value(cell) a0 a1]), body)
    3: fn* (a0, a1 a2) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2]), body)
    4: fn* (a0, a1 a2 a3) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2 a3]), body)
    5: fn* (a0, a1 a2 a3 a4) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2 a3 a4]), body)
    6: fn* (a0, a1 a2 a3 a4 a5) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2 a3 a4 a5]), body)
  set-value(cell, res)
  res

public defn apply (f, a:List) -> ? :
  switch {length(a) == _}:
    0: f()
    1: f(a[0])
    2: f(a[0], a[1])
    3: f(a[0], a[1], a[2])
    4: f(a[0], a[1], a[2], a[3])
    5: f(a[0], a[1], a[2], a[3], a[4])
    6: f(a[0], a[1], a[2], a[3], a[4], a[5])
    ;; else: false ;; TODO

defstruct UnknownMultiException <: Exception : ()

defmethod print (o:OutputStream, e:UnknownMultiException) :
  print(o, "Unknown Multi Found")

public defn eval (env:List<HashTable<Symbol, ?>>, sexpr) -> ? :
  ;; println-all(["EVAL: " sexpr])
  val res = 
    match(sexpr) :
      (i:Int) : i
      (c:Char) : c
      (d:Double) : d
      (f:Float) : f
      (t:True) : t
      (f:False) : f
      (s:String) : s
      (s:Symbol) : lookup(env, s)
      (l:List) :
        val op = head(l)
        switch {op == _} :
          `$do :
            val fexp = l[1]
            val fun  = eval(env, fexp)
            val args = map(eval{env, _}, tail(tail(l)))
            apply(fun, args)
          `$match :
            val exprs    = map(eval{env, _}, l[1])
            val branches = tail(tail(l))
            label<?> return :
              for branch in branches do :
                val bindings = branch[1]
                val types    = map(eval{env, _}, branch[2])
                val body     = branch[3]
                if all?(fn (e, t): isa?(t)(e), exprs, types) :
                  val nenv = add-bindings(env, bindings, exprs)
                  return(eval(nenv, body))
              throw(NoBranchFoundException())
          `$multi : 
            val multis = tail(l)
            if length(multis) == 2 and length(multis[0][1]) == 0 and length(multis[1][1]) == 1 : ;; TODO
              val method = multis[0]
              val body   = method[4]
              { eval(env, body) }
            else :
              throw(UnknownMultiException())
          `$def :
            val name = l[1] as Symbol
            val init = eval(env, l[3])
            add-binding(env, name, init)
          `$or :
            val t1 = eval(env, l[1])
            val t2 = eval(env, l[2])
            Type(`anon, fn (x) : isa?(t1)(x) or isa?(t2)(x), fn (x) : x)
          `$and :
            val t1 = eval(env, l[1])
            val t2 = eval(env, l[2])
            Type(`anon, fn (x) : isa?(t1)(x) and isa?(t2)(x), fn (x) : x)
          `$quote :
            l[1]
          `$as? :
            val e = eval(env, l[1])
            val t = eval(env, l[2])
            as!(t)(e)
          `$let :
            val body = l[1]
            val nenv = add-frame(env)
            eval(nenv, body)
          `$set :
            val name  = l[1] as Symbol
            val value = eval(env, l[2])
            set-binding(env, name, value)
          `$defvar :
            val name = l[1] as Symbol
            val init = eval(env, l[3])
            add-binding(env, name, init)
          `$tuple :
            to-tuple(seq(eval{env, _}, tail(l)))
          `$defn :
            val name = l[1] as Symbol
            val fun = function(env, l[2] as List<Symbol>, l[5])
            add-binding(env, name, fun)
          `$defn* :
            val name = l[1] as Symbol
            val fun = function*(name, env, l[2] as List<Symbol>, l[5])
            add-binding(env, name, fun)
          `$fn :
            function(env, l[1] as List<Symbol>, l[4])
          `$fn* :
            function*(`anon, env, l[1] as List<Symbol>, l[4])
          `$begin :
            eval-begin(env, tail(l))
          else :
            false
  ;; println-all(["EVAL -> " res])
  res

public defn eval (s:String) -> ? :
  val forms = read-all(s)
  val es = unwrap-all(parse(forms))
  val res = eval-begin(top-env, es)
  println-all(["FORMS: " forms])
  println-all(["EXP: "   es])
  println-all(["EVAL: "  res])
  res
    
public val TrueT = Type(`True, fn (x) : x is True, fn (x) : x as True)
public val FalseT = Type(`False, fn (x) : x is False, fn (x) : x as False)
public val IntT = Type(`Int, fn (x) : x is Int, fn (x) : x as Int)
public val FloatT = Type(`Float, fn (x) : x is Float, fn (x): x as Float)
public val DoubleT = Type(`Double, fn (x) : x is Double, fn (x): x as Double)

public var top-env = List(HashTable<Symbol, ?>())

public defn eval-top-env () :
  clear(top-env[0])
  add-binding(top-env, to-symbol("true"), true)
  add-binding(top-env, to-symbol("false"), false)
  add-binding(top-env, `print, print)
  add-binding(top-env, `println, println)
  add-binding(top-env, `print-all, print-all)
  add-binding(top-env, `println-all, println-all)
  add-binding(top-env, `min, min)
  add-binding(top-env, `max, max)
  add-binding(top-env, `get, get)
  add-binding(top-env, `set, set)
  add-binding(top-env, `to-float, to-float)
  add-binding(top-env, `to-double, to-double)
  add-binding(top-env, `to-int, to-int)
  add-binding(top-env, `plus, plus)
  add-binding(top-env, `minus, minus)
  add-binding(top-env, `times, times)
  add-binding(top-env, `divide, divide)
  add-binding(top-env, `negate, negate)
  add-binding(top-env, `sin, sin)
  add-binding(top-env, `cos, cos)
  add-binding(top-env, `tan, tan)
  add-binding(top-env, `asin, asin)
  add-binding(top-env, `acos, acos)
  add-binding(top-env, `atan, atan)
  add-binding(top-env, `atan2, atan2)
  add-binding(top-env, `pow, pow)
  add-binding(top-env, `less?,  less?)
  add-binding(top-env, `equal?,  equal?)
  add-binding(top-env, `to-tuple, to-tuple)
  add-binding(top-env, `do, do)
  add-binding(top-env, `join, join)
  add-binding(top-env, `cat, cat)
  add-binding(top-env, `cat-all, cat-all)
  add-binding(top-env, `map, map)
  add-binding(top-env, `seq, seq)
  add-binding(top-env, `core/Range, core/Range)
  add-binding(top-env, `True, TrueT)
  add-binding(top-env, `False, FalseT)
  add-binding(top-env, `core/True, TrueT)
  add-binding(top-env, `core/False, FalseT)
  add-binding(top-env, `Int, IntT)
  add-binding(top-env, `Float, FloatT)
  add-binding(top-env, `Double, DoubleT)

;; defn main () :
;;   val s = command-line-arguments()[1]
;;   eval(s, false)

;; main()

;;   $package $import $prefix-of $prefix $public $protected $deftype $defchild
;;   $defmulti $defmethod $defmethod* $new $as $as? $prim
;;   $none $of $->
;;   ---
;;   $def $defn $do $match $branch $tuple $begin $fn $defvar $set $defn* $fn* 
;;   $let $quote $and $or $multi
