defpackage eval:
  import core
  import math
  import collections
  import reader
  import stz/core-macros
  import utils
  import file-system

;; public defn parse (form) -> ? :
;;    #with-syntax(core) :
;;       match-syntax(form) :
;;          (?es:#exp ... ?rest ...) :
;;             es          

public defn parse (form) -> ? :
  match-syntax[core](form) :
    (?es:#exp ... ?rest ...) :
       es          

public defstruct Type :
  name: Symbol
  isa?: (?) -> True|False
  as!: (?) -> ?

defmethod print (o:OutputStream, f:Type) :
  print-all(o, ["Type(" name(f) ")"])

defstruct Entry :
  getter : () -> ?
  setter : ? -> False

public defstruct Frame :
  entries : HashTable<Symbol, Entry>
  parents : Tuple<Frame>

public defn Frame (parents:Tuple<Frame>) :
  Frame(HashTable<Symbol, Entry>(), parents)

public defn Frame () :
  Frame([])

public val *packages* = HashTable<Symbol, Package>()

public defstruct Package :
  name: Symbol
  parents : Tuple<Package>
  frame : Frame
  listeners : HashTable<Symbol, (() -> False)>

public defn Package (name:Symbol, parents:Tuple<Package>) :
  val res = Package(name, parents, Frame(to-tuple $ seq(frame, parents)), HashTable<Symbol, (() -> False)>())
  *packages*[name] = res
  res

public defn add-frame-binding* (frame:Frame, name:Symbol, getter: () -> ?, setter: ? -> False) -> False :
  entries(frame)[name] = Entry(getter, setter)

public defn add-frame-binding (frame:Frame, name:Symbol, value) -> False :
  add-frame-binding*(frame, name, { value }, { false })

public defn add-binding* (env:List<Frame>, name:Symbol, getter: () -> ?, setter: ? -> False) -> False :
  add-frame-binding*(head(env), name, getter, setter)

public defn add-binding (env:List<Frame>, name:Symbol, value) -> False :
  add-binding*(env, name, { value }, { false })

defstruct UndefinedBindingException <: Exception :
  name: Symbol

defmethod print (o:OutputStream, e:UndefinedBindingException) :
  print(o, "Undefined binding %_" % [name(e)])

defn lookup-entry (env:List<Frame>, name:Symbol) -> Entry :
  label<Entry> return :
    defn lookup-frame (frame:Frame) :
      if key?(entries(frame), name) :
        return(entries(frame)[name])
      for parent in parents(frame) do :
        lookup-frame(parent)
    for frame in env do :
      lookup-frame(frame)        
    throw(UndefinedBindingException(name))

defn lookup (env:List<Frame>, name:Symbol) -> ? :
  getter(lookup-entry(env, name))()

public defn lookup (env:Symbol, name:Symbol) -> ? :
  if key?(*packages*, env) :
    lookup(List(frame(*packages*[env])), name)
  else :
    false ;; TODO: UNDEFINED BINDING

public defn set-binding (env:List<Frame>, name:Symbol, value) :
  setter(lookup-entry(env, name))(value)

public defn add-frame (env:List<Frame>) -> List<Frame> :
  cons(Frame(), env)

public defn add-bindings (env:List<Frame>, names:List<Symbol>, values:Seqable) -> List<Frame> :
  var nenv = add-frame(env)
  for (name in names, value in values) do :
    add-binding(nenv, name, value)
  nenv

public defn eval-begin (env:List<Frame>, l:List) -> ? :
  defn* loop (elts:List) :
    val res = eval(env, head(elts))
    if empty?(tail(elts)) : res else : loop(tail(elts))
  loop(l)

defstruct NoBranchFoundException <: Exception : ()

defmethod print (o:OutputStream, e:NoBranchFoundException) :
  print(o, "No Branch Found")

defn function (env:List<Frame>, params:List<Symbol>, body) -> ? :
  switch {length(params) == _}:
    0: fn () : eval(env, body)
    1: fn (a0) : eval(add-bindings(env, params, [a0]), body)
    2: fn (a0, a1) : eval(add-bindings(env, params, [a0 a1]), body)
    3: fn (a0, a1 a2) : eval(add-bindings(env, params, [a0 a1 a2]), body)
    4: fn (a0, a1 a2 a3) : eval(add-bindings(env, params, [a0 a1 a2 a3]), body)
    5: fn (a0, a1 a2 a3 a4) : eval(add-bindings(env, params, [a0 a1 a2 a3 a4]), body)
    6: fn (a0, a1 a2 a3 a4 a5) : eval(add-bindings(env, params, [a0 a1 a2 a3 a4 a5]), body)

defstruct Cell :
  value: ? with: (setter => set-value)

defn function* (name:Symbol, env:List<Frame>, iparams:List<Symbol>, body) -> ? :
  val cell   = Cell(false)
  val params = cons(name, iparams)
  val res    = switch {length(iparams) == _}:
    0: fn* () :
         eval(add-bindings(env, params, [value(cell)]), body)
    1: fn* (a0) :
         eval(add-bindings(env, params, [value(cell) a0]), body)
    2: fn* (a0, a1) :
         eval(add-bindings(env, params, [value(cell) a0 a1]), body)
    3: fn* (a0, a1 a2) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2]), body)
    4: fn* (a0, a1 a2 a3) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2 a3]), body)
    5: fn* (a0, a1 a2 a3 a4) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2 a3 a4]), body)
    6: fn* (a0, a1 a2 a3 a4 a5) :
         eval(add-bindings(env, params, [value(cell) a0 a1 a2 a3 a4 a5]), body)
  set-value(cell, res)
  res

public defn apply (f, a:List) -> ? :
  switch {length(a) == _}:
    0: f()
    1: f(a[0])
    2: f(a[0], a[1])
    3: f(a[0], a[1], a[2])
    4: f(a[0], a[1], a[2], a[3])
    5: f(a[0], a[1], a[2], a[3], a[4])
    6: f(a[0], a[1], a[2], a[3], a[4], a[5])
    ;; else: false ;; TODO

defstruct UnknownMultiException <: Exception : ()

defmethod print (o:OutputStream, e:UnknownMultiException) :
  print(o, "Unknown Multi Found")

public defn eval (env:List<Frame>, sexpr) -> ? :
  ;; println-all(["EVAL: " sexpr])
  val res = 
    match(sexpr) :
      (i:Int) : i
      (c:Char) : c
      (d:Double) : d
      (f:Float) : f
      (t:True) : t
      (f:False) : f
      (s:String) : s
      (s:Symbol) : lookup(env, s)
      (l:List) :
        val op = head(l)
        switch {op == _} :
          `$do :
            val fexp = l[1]
            val fun  = eval(env, fexp)
            val args = map(eval{env, _}, tail(tail(l)))
            apply(fun, args)
          `$match :
            val exprs    = map(eval{env, _}, l[1])
            val branches = tail(tail(l))
            label<?> return :
              for branch in branches do :
                val bindings = branch[1]
                val types    = map(eval{env, _}, branch[2])
                val body     = branch[3]
                if all?(fn (e, t): isa?(t)(e), exprs, types) :
                  val nenv = add-bindings(env, bindings, exprs)
                  return(eval(nenv, body))
              throw(NoBranchFoundException())
          `$multi : 
            val multis = tail(l)
            if length(multis) == 2 and length(multis[0][1]) == 0 and length(multis[1][1]) == 1 : ;; TODO
              val method = multis[0]
              val body   = method[4]
              { eval(env, body) }
            else :
              throw(UnknownMultiException())
          `$def :
            val inits = eval(env, l[3])
            match(l[1]):
            (name:Symbol) : add-binding(env, name, inits)
            (names:List) :
              for (name in tail(names), init in inits) do:
                add-binding(env, name, init)
          `$or :
            val t1 = eval(env, l[1])
            val t2 = eval(env, l[2])
            Type(`anon, fn (x) : isa?(t1)(x) or isa?(t2)(x), fn (x) : x)
          `$and :
            val t1 = eval(env, l[1])
            val t2 = eval(env, l[2])
            Type(`anon, fn (x) : isa?(t1)(x) and isa?(t2)(x), fn (x) : x)
          `$quote :
            l[1]
          `$as? :
            val e = eval(env, l[1])
            val t = eval(env, l[2])
            as!(t)(e)
          `$let :
            val body = l[1]
            val nenv = add-frame(env)
            eval(nenv, body)
          `$set :
            val name  = l[1] as Symbol
            val value = eval(env, l[2])
            set-binding(env, name, value)
          `$defvar :
            val name = l[1] as Symbol
            val init = eval(env, l[3])
            add-binding(env, name, init)
          `$tuple :
            to-tuple(seq(eval{env, _}, tail(l)))
          `$defn :
            val name = l[1] as Symbol
            val fun = function(env, l[2] as List<Symbol>, l[5])
            add-binding(env, name, fun)
          `$defn* :
            val name = l[1] as Symbol
            val fun = function*(name, env, l[2] as List<Symbol>, l[5])
            add-binding(env, name, fun)
          `$fn :
            function(env, l[1] as List<Symbol>, l[4])
          `$fn* :
            function*(`anon, env, l[1] as List<Symbol>, l[4])
          `$begin :
            eval-begin(env, tail(l))
          else :
            false
  ;; println-all(["EVAL -> " res])
  res

public defn do-eval (pkg:Package, s:String) -> ? :
  val forms = read-all(s)
  val es = unwrap-all(parse(forms))
  ;; println-all(["DO-EVAL " es])
  eval-begin(List(frame(pkg)), es)

public defn safe-eval (env:Symbol, expr:String) -> ? :
  try :
    ;; println-all(["SAFE-EVAL " env " / " expr])
    if key?(*packages*, env) :
      do-eval(*packages*[env], expr)
    else :
      false
  catch (e:Exception) :
    false

public defn eval (pkg:Package, s:String) -> ? :
  val res = do-eval(pkg, s)
  add-frame-binding(frame(pkg), `*result*, res)
  for listener in listeners(pkg) do : value(listener)()
  ;; println-all(["FORMS: " forms])
  ;; println-all(["EXP: "   es])
  ;; println-all(["EVAL: "  res])
  res
    
;; defn main () :
;;   val s = command-line-arguments()[1]
;;   eval(s, false)

;; main()

;;   $package $import $prefix-of $prefix $public $protected $deftype $defchild
;;   $defmulti $defmethod $defmethod* $new $as $as? $prim
;;   $none $of $->
;;   ---
;;   $def $defn $do $match $branch $tuple $begin $fn $defvar $set $defn* $fn* 
;;   $let $quote $and $or $multi
