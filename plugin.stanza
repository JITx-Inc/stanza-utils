defpackage plugin :
  import core
  import reader
  import dlopen

defn to-stanza (any:Token) -> ? :
  match(item(any)) :
    (x:Int|Float|Double|String) :
      x
    (x:List) :
      if empty?(x) :
        x
      else :
        match(head(x)) :
          (s:Symbol) :
            switch(s) :
              `@tuple : to-tuple(map(to-stanza, tail(x)))
              else : map(to-stanza, x)
          (o) : map(to-stanza, x)

public defn deserialize (s:String) :
  val raw-items = read-all(s)
  val items = to-stanza(head(raw-items))
  println("%_ => %_" % [raw-items, items])
  items

public defn serialize (items) -> String :
  to-string(items)

public defn call-plugin (sym:DynamicSymbol, args:Tuple) -> ? :
  deserialize(call-string(sym, serialize(args)))

