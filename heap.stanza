defpackage heap :
  import core
  import collections
  import math

public defstruct BinaryHeap<T> :
  elts : Vector<T>

defmethod print (o:OutputStream, h:BinaryHeap) :
  print(o, "Heap(%_)" % [elts(h)])

public defn length (h:BinaryHeap) -> Int :
  length(elts(h)) - 1

public defn BinaryHeap<?T> (zero:?T&Comparable) :
  val h = BinaryHeap<T&Comparable>(Vector<T&Comparable>())
  add(elts(h), zero)
  h

public defn add-all<?T> (h:BinaryHeap<?T&Comparable>, alist:Tuple<?T&Comparable>) :
  val i = length(alist) / 2
  for elt in alist do :
    add(elts(h), elt)
  let loop (j:Int = i) :
    if j > 0 :
      perc-down(h, j)
      loop(j - 1)

defn perc-up<?T> (h:BinaryHeap<?T&Comparable>, ii:Int) :
  val elts = elts(h)
  let loop (i:Int = ii) :
    if (i / 2) > 0 :
      if elts[i] < elts[i / 2] :
        val tmp = elts[i / 2]
        elts[i / 2] = elts[i]
        elts[i] = tmp
      loop(i / 2)

public defn add<?T> (h:BinaryHeap<?T&Comparable>, k:?T&Comparable) :
  add(elts(h), k)
  perc-up(h, length(h))

defn perc-down<?T> (h:BinaryHeap<?T&Comparable>, ii:Int) :
  val elts = elts(h)
  let loop (i:Int = ii) :
    if (i * 2) <= length(h) :
      val mc = min-child(h, i)
      if elts[i] > elts[mc] :
        val tmp = elts[i]
        elts[i] = elts[mc]
        elts[mc] = tmp
      loop(mc)

defn min-child<?T> (h:BinaryHeap<?T&Comparable>, i:Int) :
  if (i * 2 + 1) > length(h) :
    i * 2
  else :
    if elts(h)[i * 2] < elts(h)[i * 2 + 1] :
      i * 2
    else :
      i * 2 + 1

public defn pop<?T> (h:BinaryHeap<?T&Comparable>) -> T :
  val res = elts(h)[1]
  elts(h)[1] = elts(h)[length(h)]
  pop(elts(h))
  perc-down(h, 1)
  res

public defn clear<?T> (h:BinaryHeap<?T&Comparable>) :
  while length(h) > 0 : pop(elts(h))

;; defn main () :
;;   defn test (elts:Tuple<Int>) :
;;     val h = BinaryHeap(0, elts)
;;     println(h)
;;     while length(h) > 0 :
;;       println("  ELT %_" % [pop(h)])
;;   test([9, 5, 6, 2, 3])
;;   test([9, 2, 6, 5, 3])
;;   test([2, 3, 6, 5, 9])
;;   println("MAIN")
;; 
;; main()
;; 
