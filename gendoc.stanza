defpackage stz/gendoc :
   import core
   import collections
   import reader
   import macro-utils
   import stz/input
   import stz/compiler
   import stz/core-macros
   import stz/params
   import stz/utils
   import stz/algorithms
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/type-to-kform
   import stz/kform
   import stz/kform-to-tgt
   import stz/pl-ir
   import stz/il-ir
   import stz/tl-ir
   import stz/kl-ir
   import stz/asm-ir
   import stz/tgt-ir
   import stz/tgt-utils
   import stz/namemap
   import stz/backend
   import stz/codegen
   import stz/asm-emitter
   import stz/pkg
   import stz/fuse
   import stz/compiler
   import stz/ast-lang
   import stz/reader-lang
   import stz/check-lang
   import stz/renamer-lang
   import stz/resolver-lang
   import stz/serializer-lang
   import stz/ast-printer-lang
   import registry

defn macroexpand (forms:List) -> List :
  val es = parse-syntax[core / #exps!](forms)
  cons(`$begin, es)

defn match-string (s:String, pat:String) :
  let loop (si:Int = 0) :
    if si >= length(s) :
      si >= length(pat) or pat[si] == '*'
    else if si >= length(pat) :
      false
    else if pat[si] == '*' :
      true
    else if s[si] == pat[si] :
      loop(si + 1)
    else :
      false

defn deep-subexps (e:IExp) -> Seqable<IExp> :
  generate<IExp> :
    let loop (c:IExp = e) :
      yield(c)
      do(loop, c)
    
defn match-string (e:IExp, pat:String) :
  label<True|False> return :
    for se in deep-subexps(e) do :
      match(se) :
        (v:IVar) : return(true) when match-string(to-string $ name(v), pat)
        (se) : false

defn doc-val? (e:IExp) -> True|False :
  match(e) :
    (e:IDef) : match-string(to-string(name!(name(e))), "@doc-*")
    (e) : false

defn filename-public-definitions (filenames:Seqable<String>) -> HashTable<String,List<IExp>> :
  defn public-definitions (e:IExp) :
    to-list $ generate<IExp> :
      let loop (e:IExp = e) :
        defn* loop-public (e:IExp) :
          match(e) :
            (e:IBegin) :
              do(loop-public, exps(e))
            (e:IDefn|IDef|IDefChild|IDefType|IDefVar|IDefmulti|IDefmethod|ILSDefn|ILSDefType|ILSDefmethod|IPackage) :
              yield(e)
            (e) :
              false
        match(e) :
          (e:IBegin) :
            do(loop, exps(e))
          (e:IPackage) :
            yield(e)
          (e:IDef) :
            yield(e) when doc-val?(e)
          (e:IPublic) :
            loop-public(exp(e))
          (e) :
            false
  defn public-definitions (filename:String) :
    throw(InvalidExtensionError(filename)) when not suffix?(filename,".stanza")
    public-definitions(read-prog(macroexpand(read-file(filename))))
  to-hashtable<String, List<IExp>> $ for filename in filenames seq :
    filename => public-definitions(filename)

defn pretty-targs (targs:List<IExp>) :
  "" when empty?(targs) else ("<%,>" % [pretties(targs)])

defn pretty (e:IExp) :
  match(e) :
    (e:IOf) : "%_%_" % [pretty(class(e)), pretty-targs(args(e))]
    (e:IAnd) : "%_&%_" % [pretty(a(e)), pretty(b(e))]
    (e:IOr) : "%_|%_" % [pretty(a(e)), pretty(b(e))]
    (e:IArrow) : "%_ -> %_" % [pretties(a1(e)), pretty(a2(e))]
    (e:IGradual) : "?"
    (e:IVoid) : "void"
    (e:INone) : "none"
    (e:ITuple) : "[%,]" % [pretties(exps(e))]
    (e:IVar) : name(e)
    (e:ICap) : "?%_" % [pretty(name(e))]
    (e:ILSOfT) : "%_%_" % [pretty(class(e)), pretty-targs(args(e))]
    (e:ILSRefT) : "ref<%_>" % [pretty(type(e))]
    (e) : e

defn pretties (e:List<IExp>) :
  map(pretty, e)

defn pretty-arg-type (a:IExp, t:IExp) :
  "%_:%_" % [a, pretty(t)]

defn pretty-return-type (t:IExp) :
  "" when t is INone else (" -> %_" % [pretty(t)])

defn pretty-parent (t:IExp) :
  "" when t is INone else (" <: %_" % [pretty(t)])

defn pretty-type (t:IExp) :
  "" when t is INone else (" : %_" % [pretty(t)])

defn pretty-args (targs:List<IExp>, args:List<IExp>, a1:List<IExp>, a2:IExp) :
  "%_ (%,)%_" % [pretty-targs(targs), map(pretty-arg-type, args, a1), pretty-return-type(a2)]

defn pretty-args (targs:List<IExp>, a1:List<IExp>, a2:IExp) :
  "%_ (%,)%_" % [pretty-targs(targs), pretties(a1), pretty-return-type(a2)]

defn print-definition (e:IExp) :
  match(e) :
    (e:ILSDefType) :   println("lostanza deftype %_%_%_" % [name(e) pretty-targs(args(e)) pretty-parent(parent(e))])
    (e:ILSDefn) :      println("lostanza defn %_%_" % [name(e) pretty-args(targs(e), args(e), a1(e) a2(e))])
    (e:ILSDefmethod) : println("lostanza defmethod %_%_" % [multi(e) pretty-args(targs(e), args(e), a1(e) a2(e))])
    (e:IDefType) :     println("deftype %_%_%_" % [class(e) pretty-targs(args(e)) pretty-parent(parent(e))])
    (e:IDef) :
      if doc-val?(e) :
        println("%_" % [value(value(e) as ILiteral)])
      else :
        println("val %_%_" % [name(e) pretty-type(type(e))])
    (e:IDefVar) :      println("var %_%_" % [name(e) pretty-type(type(e))])
    (e:IDefn) :        println("defn %_%_" % [name(e) pretty-args(targs(e), args(e), a1(e) a2(e))])
    (e:IDefmulti) :    println("defmulti %_%_" % [name(e) pretty-args(targs(e), a1(e) a2(e))])
    (e:IDefmethod) :   println("defmethod %_%_" % [multi(e) pretty-args(targs(e), args(e), a1(e) a2(e))])
    (e:IPackage) :     println("defpackage %_" % [name(e)])
    (e) : false

defn breakup<?T> (break?:T -> True|False, s:Seqable<?T>) -> Seqable<Tuple<T>> :
  generate<Tuple<T>> :
    val ss = to-seq(s)
    val v = Vector<T>()
    let loop () :
      if empty?(ss) :
        yield(to-tuple(v)) when length(v) > 0
      else :
        val e = next(ss)
        if break?(e) :
          yield(to-tuple(v)) when length(v) > 0
          clear(v)
        add(v, e)
        loop()

public defn gen-doc (all-files:Seqable<File>, legal-filenames:HashSet<String>, illegal-names:Tuple<String>) :
  val files0 = to-tuple $ for file in all-files filter :
    suffix?(name(file), ".stanza") and legal-filenames[name(file)]
  val filenames = to-list $ seq(name, filter({ kind(_) != `gen}, files0))
  val filename-definitions = filename-public-definitions(filenames)

  defn move-package-doc (defs:List<IExp>) -> Seqable<IExp> :
    generate<IExp> :
      let loop (prev:IExp = head(defs), next:List<IExp> = tail(defs)) :
        if empty?(next) :
          yield(prev)
        else :
          val elt = head(next)
          if prev is IPackage and doc-val?(elt) :
            yield(elt)
            yield(prev)
            val nxt = tail(next)
            loop(head(nxt), tail(nxt))
          else :
            yield(prev)
            loop(elt, tail(next))
          
  for entry in filename-definitions do :
    val [filename, all-definitions] = [key(entry), value(entry)]
    ;; println(";;; FILENAME %_" % [filename])
    defn legal-definition? (e:IExp) : not any?(match-string{e, _}, illegal-names)    
    val definitions0 = filter(legal-definition?, all-definitions)
    val definitions = move-package-doc(to-list $ definitions0)
    val groups = breakup(fn (d) : d is IDefType|ILSDefType|IPackage, definitions)
    var code? = false
    for group in groups do :
      for def in group do :
        val to-code? = not doc-val?(def)
        if to-code? == true and code? == false :
          println("```") 
        else if to-code? == false and code? == true :
          println("```") 
        code? = to-code?
        print-definition(def)
      println("```") when code?
      code? = false
    println("")

defn InvalidExtensionError (filename:String) :
  new Exception :
    defmethod print (o:OutputStream, this) :
      print(o, "File %_ does not have a valid Stanza file extension." % [filename])

defn main () :
  val filename = command-line-arguments()[1]
  val input = to-tuple $ registry-files(filename)
  val files = to-hashset<String> $ ["./stanza-geom/geom.stanza" "./stanza-geom/clipper.stanza" "./stanza-gfx/font.stanza" "./stanza-libfive/libfive.stanza"]
  val exclude-names = 
    ["Transformation" "ArcBall" "MOV-AMOUNT" "MAG-SCALE"  "MOV-SCALE"
     "V2d" "V3d" "Box1d" "Box2d" "Box3d"
     "space-*" "Half" "Glue*" "glue-*" "spacer*"
     "AnyGlue" "AssemblyGlue" "ShapeGlue"  "AnyShapeState"
     "display-list" "set-display-list"
     "Vf" "Vi" "Vb" "Pixels" "ensure-index-in-bounds"
     "AnyTree" "Tree" "FloField*" "FloField" "BoundedTree" "TreeAssembly" "LibFiveMesh" "Vec3Field" "Vec2Field"
     "jit*" "smash" "min-lit" "max-lit" "opcode" "bumps" "set-mesh" "round-box"
     "get-vert-value" "get-vert-index" "tri-count" "vert-count"]
  gen-doc(input, files, exclude-names)

main()
