defpackage utils/buffered-stream :
  import core

public deftype PollableInputStream <: InputStream
public defmulti avail? (p:PollableInputStream) -> True|False

public deftype CharBuffer
defmulti peek? (buf:CharBuffer) -> False|Char
defmulti avail? (buf:CharBuffer) -> True|False
defmulti get-char (buf:CharBuffer) -> False|Char

public defn CharBuffer (capacity:Int, fill:(CharArray, Int) -> Int, avail?: () -> True|False) :
  val data = CharArray(capacity)
  var idx  = 0
  var len  = 0
  new CharBuffer :
    defmethod peek? (this) -> False|Char :
      if idx >= len :
        len = fill(data, capacity)
        idx = 0
      if len == 0 :
        false
      else :
        data[idx]
    defmethod avail? (this) -> True|False :
      idx < len or avail?()
    defmethod get-char (this) -> False|Char :
      match(peek?(this)) :
        (f:False) : false
        (c:Char) :  (idx = idx + 1, c)

public defn CharBuffer (capacity:Int, stream:PollableInputStream) :
  CharBuffer(capacity, fill{_, 0 to _, stream}, avail?{stream})

public deftype MyBufferedInputStream <: PollableInputStream
public defmulti peek? (s:MyBufferedInputStream) -> Char|False
public defmulti buffer (s:MyBufferedInputStream) -> CharBuffer

defmethod peek? (x:MyBufferedInputStream) :
  peek?(buffer(x))

defmethod avail? (x:MyBufferedInputStream) :
  avail?(buffer(x))

defmethod get-char (x:MyBufferedInputStream) :
  get-char(buffer(x))

public defn MyBufferedInputStream (buf:CharBuffer) :
  new MyBufferedInputStream :
    defmethod buffer (this) : buf

public defn MyBufferedInputStream (stream:PollableInputStream, size:Int) :
  MyBufferedInputStream(CharBuffer(size, stream))

public defn MyBufferedInputStream (size:Int, fill:(CharArray, Int) -> Int, avail?: () -> True|False) :
  MyBufferedInputStream(CharBuffer(size, fill, avail?))

public defn get-char! (s:MyBufferedInputStream) -> Char :
  match(get-char(s)) :
    (f:False): fail()
    (c:Char): c

public defn get-chars! (s:MyBufferedInputStream, n:Int) -> String :
  val buffer = StringBuffer()
  for i in 0 to n do :
    add(buffer, get-char!(s))
  to-string(buffer)

public defn get-chars-while (s:MyBufferedInputStream, f:(Char) -> True|False) -> String :
  val buffer = StringBuffer()
  while peek?(s) is Char and f(peek?(s) as Char) :
    add(buffer, get-char!(s))
  to-string(buffer)

public defn parse-int (s:MyBufferedInputStream) -> Int :
  val chars = get-chars-while(s, digit?)
  to-int(chars) as Int

public defn expect-char (s:MyBufferedInputStream, c:Char) -> False :
  val gc = get-char(s)
  if gc != c: fatal("Expected %_ got %_" % [c, gc])

